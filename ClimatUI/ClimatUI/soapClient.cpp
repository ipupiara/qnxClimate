/* soapClient.cpp
   Generated by gSOAP 2.7.9a from getStates.h
   Copyright(C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "stdafx.h"

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.9a 2012-10-23 03:16:41 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getGrowBoxInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, GrowBoxInfo *Result)
{	struct ns__getGrowBoxInfo soap_tmp_ns__getGrowBoxInfo;
	if (!soap_endpoint)
		soap_endpoint = "http://services.xmethods.net/soap";
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__getGrowBoxInfo(soap, &soap_tmp_ns__getGrowBoxInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getGrowBoxInfo(soap, &soap_tmp_ns__getGrowBoxInfo, "ns:getGrowBoxInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getGrowBoxInfo(soap, &soap_tmp_ns__getGrowBoxInfo, "ns:getGrowBoxInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!Result)
		return soap_closesock(soap);
	Result->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	Result->soap_get(soap, "GrowBoxInfo", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__performAction(struct soap *soap, const char *soap_endpoint, const char *soap_action, long actionCode, long &return_Code)
{	struct ns__performAction soap_tmp_ns__performAction;
	struct ns__performActionResponse *soap_tmp_ns__performActionResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://services.xmethods.net/soap";
	soap->encodingStyle = "";
	soap_tmp_ns__performAction.actionCode = actionCode;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__performAction(soap, &soap_tmp_ns__performAction);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__performAction(soap, &soap_tmp_ns__performAction, "ns:performAction", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__performAction(soap, &soap_tmp_ns__performAction, "ns:performAction", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_xsd__int(soap, &return_Code);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__performActionResponse = soap_get_ns__performActionResponse(soap, NULL, "ns:performActionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_Code = soap_tmp_ns__performActionResponse->return_Code;
	return soap_closesock(soap);
}

/* End of soapClient.cpp */
